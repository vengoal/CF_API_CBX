     **
     **  Program . . : CBX313O
     **  Description : Change User Space Attributes - POP
     **  Author  . . : Carsten Flensburg
     **
     **
     **  Parameters:
     **    PxCmdNam_q  INPUT      Qualified command name
     **
     **    PxKeyPrm1   INPUT      Key parameter identifying the data queue
     **                           to retrieve attribute information about.
     **
     **    PxCmdStr    OUTPUT     The formatted command prompt string
     **                           returning the current attribute setting
     **                           of the specified data queue to the
     **                           command processor.
     **
     **
     **  Compile options:
     **    CrtRpgMod Module( CBX313O )
     **              DbgView( *LIST )
     **
     **    CrtPgm    Pgm( CBX313O )
     **              Module( CBX313O )
     **              ActGrp( *NEW )
     **
     **
     **-- Header specifications:  --------------------------------------------**
     H Option( *SrcStmt )

     **-- API error data structure:
     D ERRC0100        Ds                  Qualified
     D  BytPrv                       10i 0 Inz( %Size( ERRC0100 ))
     D  BytAvl                       10i 0
     D  MsgId                         7a
     D                                1a
     D  MsgDta                      256a

     **-- Global constants:
     D OFS_MSGDTA      c                   16
     **-- Global variables:
     D SpcTfrSiz       s             10i 0

     **-- SPCA0100 format:
     D SPCA0100        Ds                  Qualified
     D  BytRtn                       10i 0
     D  BytAvl                       10i 0
     D  SpcSiz                       10i 0
     D  AutExt                        1a
     D  InzVal                        1a
     D  SpcLibNam                    10a

     **-- Retrieve user space attributes:
     D RtvUsrSpcAtr    Pr                  ExtPgm( 'QUSRUSAT' )
     D  RcvVar                    32767a          Options( *VarSize )
     D  RcvVarLen                    10i 0 Const
     D  FmtNam                       10a   Const
     D  UsrSpc_q                     20a   Const
     D  Error                     32767a          Options( *VarSize )
     **-- Send program message:
     D SndPgmMsg       Pr                  ExtPgm( 'QMHSNDPM' )
     D  MsgId                         7a   Const
     D  MsgFil_q                     20a   Const
     D  MsgDta                      512a   Const  Options( *VarSize )
     D  MsgDtaLen                    10i 0 Const
     D  MsgTyp                       10a   Const
     D  CalStkEnt                    10a   Const  Options( *VarSize )
     D  CalStkCtr                    10i 0 Const
     D  MsgKey                        4a
     D  Error                       512a          Options( *VarSize )
     **
     D  CalStkEntLen                 10i 0 Const  Options( *NoPass )
     D  CalStkEntQlf                 20a   Const  Options( *NoPass )
     D  DspWait                      10i 0 Const  Options( *NoPass )
     **
     D  CalStkEntTyp                 20a   Const  Options( *NoPass )
     D  CcsId                        10i 0 Const  Options( *NoPass )

     **-- Get space transfer size:
     D GetSpcTfrSiz    Pr            10i 0
     D  PxUsrSpc_q                   20a   Const
     **-- Convert character to hex nibbles:
     D CvtChrHex       Pr           256a   Varying
     D  PxHexStr                    128a   Varying  Const
     **-- Send diagnostic message:
     D SndDiagMsg      Pr            10i 0
     D  PxMsgId                       7a   Const
     D  PxMsgDta                    512a   Const  Varying
     **-- Send escape message:
     D SndEscMsg       Pr            10i 0
     D  PxMsgId                       7a   Const
     D  PxMsgDta                    512a   Const  Varying

     **-- Entry parameters:
     D ObjNam_q        Ds                  Qualified
     D  ObjNam                       10a
     D  ObjLib                       10a
     **
     D CBX313O         Pr
     D  PxCmdNam_q                   20a
     D  PxKeyPrm1                          LikeDs( ObjNam_q )
     D  PxCmdStr                  32674a   Varying
     **
     D CBX313O         Pi
     D  PxCmdNam_q                   20a
     D  PxKeyPrm1                          LikeDs( ObjNam_q )
     D  PxCmdStr                  32674a   Varying

      /Free

        RtvUsrSpcAtr( SPCA0100
                    : %Size( SPCA0100 )
                    : 'SPCA0100'
                    : PxKeyPrm1
                    : ERRC0100
                    );

        If  ERRC0100.BytAvl > *Zero;

          If  ERRC0100.BytAvl < OFS_MSGDTA;
            ERRC0100.BytAvl = OFS_MSGDTA;
          EndIf;

          SndDiagMsg( ERRC0100.MsgId
                    : %Subst( ERRC0100.MsgDta: 1: ERRC0100.BytAvl - OFS_MSGDTA )
                    );

          SndEscMsg( 'CPF0011': '' );
        EndIf;

        ExSr  RtvSpcInf;


        *InLr = *On;
        Return;

        BegSr  RtvSpcInf;

          Select;
          When  SPCA0100.AutExt = '0';
            PxCmdStr += '?<AUTOEXT(*NO) ';

          When  SPCA0100.AutExt = '1';
            PxCmdStr += '?<AUTOEXT(*YES) ';

          Other;
            PxCmdStr += '?<AUTOEXT(*SAME) ';
          EndSl;

          Select;
          When  SPCA0100.SpcSiz > *Zero;
            PxCmdStr += '?<SIZE(' + %Char( SPCA0100.SpcSiz ) + ') ';

          Other;
            PxCmdStr += '?<SIZE(*SAME) ';
          EndSl;

          Select;
          When  SPCA0100.InzVal = x'00';
            PxCmdStr += '?<INZVAL(*DFT) ';

          When  SPCA0100.InzVal = *Blank;
            PxCmdStr += '?<INZVAL(*BLANK) ';

          When  SPCA0100.InzVal < x'43'  Or  SPCA0100.InzVal = x'FF';
            PxCmdStr += '?<INZVAL(x''' + CvtChrHex( SPCA0100.InzVal ) + ''') ';

          Other;
            PxCmdStr += '?<INZVAL(''' + SPCA0100.InzVal + ''') ';
          EndSl;

          SpcTfrSiz = GetSpcTfrSiz( PxKeyPrm1 );

          Select;
          When  SpcTfrSiz < *Zero;
            PxCmdStr += '?<TFRSIZE(*SAME) ';

          Other;
            PxCmdStr += '?<TFRSIZE(' + %Char( SpcTfrSiz ) + ') ';
          EndSl;

        EndSr;

      /End-Free

     **-- Get space transfer size:
     P GetSpcTfrSiz    B
     D                 Pi            10i 0
     D  PxUsrSpc_q                   20a   Const

     **-- Local declarations:
     D pSysPtr         s               *   ProcPtr
     D pUsrSpc         s               *
     **
     D SPC_Templ_T     Ds                  Qualified
     D  NbrBytPrv                    10i 0 Inz( %Size( SPC_Templ_T ))
     D  NbrBytAvl                    10i 0
     D  ObjID
     D   ObjTyp                       1a   Overlay( ObjID: *Next )
     D   ObjSubTyp                    1a   Overlay( ObjID: *Next )
     D   ObjNam                      30a   Overlay( ObjID: *Next )
     D  ObjCrtOpts                    4a
     D  Res1                          2a
     D  AspNbr                        2a
     D  SpcSiz                       10i 0
     D  InzVal                        1a
     D  PfrCls                        4a
     D  ExpTfrSiz                     3i 0 Overlay( PfrCls: 4 )
     D  Res2                          7a
     D  Ctx                            *
     D  AccGrp                         *
     D  Res3                         16a
     D  MaxSiz                       10i 0

     **-- Retrieve pointer to user space:
     D RtvPtrSpc       Pr                  ExtPgm( 'QUSPTRUS' )
     D  SpcNam_q                     20a   Const
     D  Pointer                        *
     D  Error                     32767a         Options( *NoPass: *VarSize )
     **
     D mats            Pr                  ExtProc( 'mats' )
     D  Template                           Const  Like( SPC_Templ_T )
     D  SpcPtr                         *   Value  ProcPtr
     **
     D setspfp         Pr              *   ProcPtr  ExtProc( 'setspfp' )
     D  SpcPtr                         *   Value

      /Free

        RtvPtrSpc( PxUsrSpc_q: pUsrSpc: ERRC0100 );

        If  ERRC0100.BytAvl > *Zero;
          Return  -1;
        EndIf;

        pSysPtr = setspfp( pUsrSpc );

        If  pSysPtr = *Null;
          Return  -1;
        EndIf;

        mats( SPC_Templ_T: pSysPtr );

        Return  SPC_Templ_T.ExpTfrSiz;

      /End-Free

     P GetSpcTfrSiz    E
     **-- Convert character to hex nibbles:  ---------------------------------**
     P CvtChrHex       B                   Export
     D                 Pi           256a   Varying
     D  PxChrStr                    128a   Varying  Const

     **-- Local declarations
     D ChrStr          s            128a
     D HexStr          s            256a
     **-- Convert hex to character:
     D cvthc           Pr                  ExtProc( 'cvthc' )
     D  RcvHex                         *   Value
     D  SrcChr                         *   Value
     D  RcvLen                       10i 0 Value

      /Free

        ChrStr = PxChrStr;

        cvthc( %Addr( HexStr ): %Addr( ChrStr ): %Len( PxChrStr ) * 2 );

        Return  %Subst( HexStr: 1: %Int( %Len( PxChrStr ) * 2 ));

      /End-Free

     P CvtChrHex       E
     **-- Send diagnostic message:
     P SndDiagMsg      B
     D                 Pi            10i 0
     D  PxMsgId                       7a   Const
     D  PxMsgDta                    512a   Const  Varying
     **
     D MsgKey          s              4a

      /Free

        SndPgmMsg( PxMsgId
                 : 'QCPFMSG   *LIBL'
                 : PxMsgDta
                 : %Len( PxMsgDta )
                 : '*DIAG'
                 : '*PGMBDY'
                 : 1
                 : MsgKey
                 : ERRC0100
                 );

        If  ERRC0100.BytAvl > *Zero;
          Return  -1;

        Else;
          Return   0;
        EndIf;

      /End-Free

     P SndDiagMsg      E
     **-- Send escape message:
     P SndEscMsg       B
     D                 Pi            10i 0
     D  PxMsgId                       7a   Const
     D  PxMsgDta                    512a   Const  Varying
     **
     D MsgKey          s              4a

      /Free

        SndPgmMsg( PxMsgId
                 : 'QCPFMSG   *LIBL'
                 : PxMsgDta
                 : %Len( PxMsgDta )
                 : '*ESCAPE'
                 : '*PGMBDY'
                 : 1
                 : MsgKey
                 : ERRC0100
                 );

        If  ERRC0100.BytAvl > *Zero;
          Return  -1;

        Else;
          Return   0;
        EndIf;

      /End-Free

     P SndEscMsg       E
